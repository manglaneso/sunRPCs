/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _FS_SERVER_H_RPCGEN
#define _FS_SERVER_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define NFSMAXDATA2 8192
#define READMODE 0
#define WRITEMODE 1
#define RWMODE 3

typedef struct {
	u_int RWData_len;
	char *RWData_val;
} RWData;

struct ReadRes {
	int nread;
	RWData data;
};
typedef struct ReadRes ReadRes;

struct mi_creat_1_argument {
	char *name;
	int modo;
};
typedef struct mi_creat_1_argument mi_creat_1_argument;

struct mi_open_1_argument {
	char *name;
	int flags;
};
typedef struct mi_open_1_argument mi_open_1_argument;

struct mi_read_1_argument {
	int fd;
	int pos;
	int size;
};
typedef struct mi_read_1_argument mi_read_1_argument;

struct mi_write_1_argument {
	int fd;
	RWData data;
	int pos;
	int size;
};
typedef struct mi_write_1_argument mi_write_1_argument;

#define FS_SERVER 100005
#define FS_SERVER_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define mi_get_size 1
extern  enum clnt_stat mi_get_size_1(int , int *, CLIENT *);
extern  bool_t mi_get_size_1_svc(int , int *, struct svc_req *);
#define mi_creat 2
extern  enum clnt_stat mi_creat_1(char *, int , int *, CLIENT *);
extern  bool_t mi_creat_1_svc(char *, int , int *, struct svc_req *);
#define mi_open 3
extern  enum clnt_stat mi_open_1(char *, int , int *, CLIENT *);
extern  bool_t mi_open_1_svc(char *, int , int *, struct svc_req *);
#define mi_close 4
extern  enum clnt_stat mi_close_1(int , int *, CLIENT *);
extern  bool_t mi_close_1_svc(int , int *, struct svc_req *);
#define mi_unlink 5
extern  enum clnt_stat mi_unlink_1(char *, int *, CLIENT *);
extern  bool_t mi_unlink_1_svc(char *, int *, struct svc_req *);
#define mi_read 6
extern  enum clnt_stat mi_read_1(int , int , int , ReadRes *, CLIENT *);
extern  bool_t mi_read_1_svc(int , int , int , ReadRes *, struct svc_req *);
#define mi_write 7
extern  enum clnt_stat mi_write_1(int , RWData , int , int , int *, CLIENT *);
extern  bool_t mi_write_1_svc(int , RWData , int , int , int *, struct svc_req *);
extern int fs_server_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define mi_get_size 1
extern  enum clnt_stat mi_get_size_1();
extern  bool_t mi_get_size_1_svc();
#define mi_creat 2
extern  enum clnt_stat mi_creat_1();
extern  bool_t mi_creat_1_svc();
#define mi_open 3
extern  enum clnt_stat mi_open_1();
extern  bool_t mi_open_1_svc();
#define mi_close 4
extern  enum clnt_stat mi_close_1();
extern  bool_t mi_close_1_svc();
#define mi_unlink 5
extern  enum clnt_stat mi_unlink_1();
extern  bool_t mi_unlink_1_svc();
#define mi_read 6
extern  enum clnt_stat mi_read_1();
extern  bool_t mi_read_1_svc();
#define mi_write 7
extern  enum clnt_stat mi_write_1();
extern  bool_t mi_write_1_svc();
extern int fs_server_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_RWData (XDR *, RWData*);
extern  bool_t xdr_ReadRes (XDR *, ReadRes*);
extern  bool_t xdr_mi_creat_1_argument (XDR *, mi_creat_1_argument*);
extern  bool_t xdr_mi_open_1_argument (XDR *, mi_open_1_argument*);
extern  bool_t xdr_mi_read_1_argument (XDR *, mi_read_1_argument*);
extern  bool_t xdr_mi_write_1_argument (XDR *, mi_write_1_argument*);

#else /* K&R C */
extern bool_t xdr_RWData ();
extern bool_t xdr_ReadRes ();
extern bool_t xdr_mi_creat_1_argument ();
extern bool_t xdr_mi_open_1_argument ();
extern bool_t xdr_mi_read_1_argument ();
extern bool_t xdr_mi_write_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_FS_SERVER_H_RPCGEN */
